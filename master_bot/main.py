"""
Master Bot - –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç SaaS –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import logging
import re
import sys
import traceback
from pathlib import Path
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# Add project root to path for imports
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# IMPROVED IMPORTS WITH DETAILED LOGGING
try:
    from master_bot.database import MasterDatabase
    logging.info("‚úÖ Successfully imported MasterDatabase")
except ImportError as e:
    logging.error(f"‚ùå Failed to import MasterDatabase: {e}")
    logging.error(f"Traceback: {traceback.format_exc()}")
    sys.exit(1)

try:
    from shared.telegram_utils import verify_bot_token
    logging.info("‚úÖ Successfully imported verify_bot_token")
except ImportError as e:
    logging.error(f"‚ùå Failed to import verify_bot_token: {e}")
    logging.error(f"Traceback: {traceback.format_exc()}")
    sys.exit(1)

class MasterBot:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.db = MasterDatabase()
        self.application = None
        
        logging.info("MasterBot initialized successfully")
        
    async def setup_handlers(self, application: Application):
        """Configure all handlers for master bot"""
        
        # Main handlers
        application.add_handler(CommandHandler("start", self.handle_start))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_input))
        
        logging.info("Master bot handlers configured")
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        user_id = user.id
        
        try:
            # Update user activity
            self.db.update_user_activity(user_id)
            
            # Check if user exists
            db_user = self.db.get_user_by_telegram_id(user_id)
            
            if not db_user:
                # New user registration
                db_user_id = self.db.create_user(
                    telegram_id=user_id,
                    username=user.username,
                    first_name=user.first_name
                )
                
                await self.send_welcome_message(update, context)
            else:
                # Existing user - show dashboard
                await self.show_user_dashboard(update, context, db_user)
                
        except Exception as e:
            logging.error(f"Error in handle_start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def send_welcome_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Send welcome message to new user"""
        message = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bot Factory!</b>

–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–≤–æ–µ–º Telegram –∫–∞–Ω–∞–ª–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã:

‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
‚úÖ –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ Telegram  
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ UTM-—Ç—Ä–µ–∫–∏–Ω–≥
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∫–∞–Ω–∞–ª–∞

üéÅ <b>MVP –≤–µ—Ä—Å–∏—è - –ë–ï–°–ü–õ–ê–¢–ù–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>–ß—Ç–æ —É–º–µ–µ—Ç —Ç–≤–æ–π –±–æ—Ç:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –¢—ã —Å–æ–∑–¥–∞–µ—à—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
2. –î–∞–µ—à—å –º–Ω–µ —Ç–æ–∫–µ–Ω - —è –∑–∞–ø—É—Å–∫–∞—é —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
3. –î–æ–±–∞–≤–ª—è–µ—à—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª
4. –£–ø—Ä–∞–≤–ª—è–µ—à—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?
"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞", callback_data="create_bot")],
            [InlineKeyboardButton("üì∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="show_examples")],
            [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_user_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: dict):
        """Show user dashboard with existing bots"""
        try:
            user_bots = self.db.get_user_bots(user['id'])
            
            if not user_bots:
                await self.send_welcome_message(update, context)
                return
            
            # Safely handle user data
            safe_first_name = user.get('first_name') or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            message = f"üè† <b>–¢–≤–æ—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            message += f"üëã –ü—Ä–∏–≤–µ—Ç, {safe_first_name}!\n\n"
            message += f"<b>–¢–≤–æ–∏ –±–æ—Ç—ã ({len(user_bots)}):</b>\n\n"
            
            keyboard = []
            
            for bot in user_bots:
                status_emoji = {
                    'active': '‚úÖ',
                    'creating': 'üîÑ',
                    'stopped': '‚è∏Ô∏è',
                    'error': '‚ùå'
                }.get(bot['status'], '‚ùì')
                
                bot_username = bot.get('bot_username', 'unknown')
                bot_status = bot.get('status', 'unknown')
                
                message += f"{status_emoji} @{bot_username} - {bot_status}\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"‚öôÔ∏è @{bot_username}", callback_data=f"manage_{bot['id']}"),
                    InlineKeyboardButton("üìä", callback_data=f"stats_{bot['id']}")
                ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", callback_data="create_bot")])
            keyboard.append([InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")])
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
        except Exception as e:
            logging.error(f"Error showing dashboard: {e}")
            # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fallback_message = "üè† –¢–≤–æ—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", callback_data="create_bot")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")]
            ]
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    fallback_message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await update.message.reply_text(
                    fallback_message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            if data == "create_bot":
                await self.initiate_bot_creation(update, context)
            elif data == "show_examples":
                await self.show_examples(update, context)
            elif data == "contact_support":
                await self.contact_support(update, context)
            elif data.startswith("manage_"):
                bot_id = int(data.split("_")[1])
                await self.manage_bot(update, context, bot_id)
            elif data.startswith("stats_"):
                bot_id = int(data.split("_")[1])
                await self.show_bot_stats(update, context, bot_id)
            elif data.startswith("restart_"):
                bot_id = int(data.split("_")[1])
                await self.restart_bot(update, context, bot_id)
            elif data == "back_to_dashboard":
                user = self.db.get_user_by_telegram_id(update.effective_user.id)
                await self.show_user_dashboard(update, context, user)
            else:
                await query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logging.error(f"Error in callback handler: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def initiate_bot_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start bot creation process"""
        context.user_data['creation_step'] = 'waiting_token'
        
        message = """
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ - –®–∞–≥ 1/3</b>

–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather:

<b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –∫ @BotFather
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É: /newbot
3Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π –∏–º—è: "–ú–æ–π –∫–∞–Ω–∞–ª –ø–æ–º–æ—â–Ω–∏–∫"
4Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π username: @mychannel_helper_bot
5Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Ç–æ–∫–µ–Ω: 123456789:ABC-DEF1234567890

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
‚Ä¢ Username –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ bot
‚Ä¢ –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: —á–∏—Å–ª–∞:–±—É–∫–≤—ã-—Ü–∏—Ñ—Ä—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–∫–µ–Ω - –æ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å —Ç–æ–∫–µ–Ω - –ø—Ä–∏—à–ª–∏ –µ–≥–æ –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

<b>–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:</b>
<code>1234567890:ABCdefGHI123-456789JKLmnop</code>
"""
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")],
            [InlineKeyboardButton("‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", callback_data="contact_support")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages (bot tokens)"""
        if context.user_data.get('creation_step') == 'waiting_token':
            await self.process_bot_token(update, context)
        else:
            # Default response for unexpected messages
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Bot Factory."
            )
    
    async def process_bot_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process and validate bot token"""
        token = update.message.text.strip()
        user_id = update.effective_user.id
        
        try:
            logging.info(f"üîÑ Processing bot token for user {user_id}")
            
            # Validate token format
            if not re.match(r'^\d+:[A-Za-z0-9_-]+$', token):
                logging.warning(f"‚ùå Invalid token format from user {user_id}")
                await update.message.reply_text(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞</b>\n\n"
                    "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n"
                    "<code>1234567890:ABCdefGHI123-456789JKLmnop</code>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode='HTML'
                )
                return
            
            # Show processing message
            processing_msg = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")
            logging.info(f"üîÑ Verifying token for user {user_id}")
            
            # Verify token works
            bot_info = await verify_bot_token(token)
            if not bot_info:
                logging.error(f"‚ùå Token verification failed for user {user_id}")
                await processing_msg.edit_text(
                    "‚ùå <b>–¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
                    "‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                    "‚Ä¢ –¢–æ–∫–µ–Ω —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                    parse_mode='HTML'
                )
                return
            
            logging.info(f"‚úÖ Token verified successfully for user {user_id}, bot: @{bot_info['username']}")
            
            # Check if token already exists
            if self.db.bot_exists_by_token(token):
                logging.warning(f"‚ùå Token already exists for user {user_id}")
                await processing_msg.edit_text(
                    "‚ùå <b>–≠—Ç–æ—Ç –±–æ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /start"
                )
                return
            
            # Create bot record
            db_user = self.db.get_user_by_telegram_id(user_id)
            logging.info(f"üîÑ Creating bot record for user {user_id}")
            
            bot_id = self.db.create_user_bot(
                owner_id=db_user['id'],
                bot_token=token,
                bot_username=bot_info['username'],
                bot_display_name=bot_info.get('first_name', bot_info['username'])
            )
            
            logging.info(f"‚úÖ Bot record created with ID {bot_id}")
            await processing_msg.edit_text("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç! –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            
            # Deploy bot
            context.user_data['bot_id'] = bot_id
            await self.deploy_user_bot(update, context, bot_info, processing_msg)
            
        except Exception as e:
            logging.error(f"‚ùå Error processing bot token for user {user_id}: {e}")
            logging.error(f"Traceback: {traceback.format_exc()}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞")
    
    async def deploy_user_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             bot_info: dict, message_to_edit):
        """Deploy user bot - IMPROVED WITH DETAILED LOGGING"""
        bot_id = context.user_data['bot_id']
        
        try:
            logging.info(f"üöÄ Starting deployment for bot {bot_id}")
            
            # IMPROVED IMPORT WITH DETAILED LOGGING
            try:
                logging.info("üîÑ Attempting to import BotProcessManager...")
                from bot_manager.process_manager import BotProcessManager
                logging.info("‚úÖ BotProcessManager imported successfully")
            except ImportError as e:
                logging.error(f"‚ùå CRITICAL: Failed to import BotProcessManager: {e}")
                logging.error(f"Traceback: {traceback.format_exc()}")
                logging.error(f"Python path: {sys.path}")
                
                await self.show_deployment_error(update, context, message_to_edit, 
                    f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                return
            except Exception as e:
                logging.error(f"‚ùå CRITICAL: Unexpected error importing BotProcessManager: {e}")
                logging.error(f"Traceback: {traceback.format_exc()}")
                
                await self.show_deployment_error(update, context, message_to_edit, 
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                return
            
            # Initialize manager
            try:
                logging.info("üîÑ Initializing BotProcessManager...")
                manager = BotProcessManager()
                logging.info("‚úÖ BotProcessManager initialized successfully")
            except Exception as e:
                logging.error(f"‚ùå Failed to initialize BotProcessManager: {e}")
                logging.error(f"Traceback: {traceback.format_exc()}")
                
                await self.show_deployment_error(update, context, message_to_edit, 
                    f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return
            
            # Deploy bot
            logging.info(f"üîÑ Calling deploy_user_bot for bot {bot_id}...")
            success = await manager.deploy_user_bot(bot_id)
            
            if success:
                logging.info(f"‚úÖ Bot {bot_id} deployed successfully!")
                await self.show_deployment_success(update, context, bot_info, message_to_edit)
            else:
                logging.error(f"‚ùå Bot {bot_id} deployment failed")
                await self.show_deployment_error(update, context, message_to_edit)
                
        except Exception as e:
            logging.error(f"‚ùå CRITICAL: Unexpected error in deploy_user_bot for bot {bot_id}: {e}")
            logging.error(f"Traceback: {traceback.format_exc()}")
            await self.show_deployment_error(update, context, message_to_edit, str(e))
    
    async def show_deployment_success(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    bot_info: dict, message_to_edit):
        """Show successful deployment message"""
        bot_username = bot_info['username']
        
        message = f"""
üéâ <b>–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π @{bot_username} –∑–∞–ø—É—â–µ–Ω!</b>

üìã <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</b>

<b>1Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
‚Ä¢ –ó–∞–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  
‚Ä¢ –ù–∞–π–¥–∏ @{bot_username} –∏ –¥–æ–±–∞–≤—å
‚Ä¢ –î–∞–π –ø—Ä–∞–≤–∞: "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π" –∏ "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

<b>2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–≤–æ–µ–º—É –±–æ—Ç—É:</b> @{bot_username}

<b>3Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –µ–º—É /start</b> - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!

üéÅ <b>MVP –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>
üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—â–∞–π—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
"""
        
        keyboard = [
            [InlineKeyboardButton(f"ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ @{bot_username}", 
                                url=f"https://t.me/{bot_username}")],
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", 
                                callback_data="setup_guide")],
            [InlineKeyboardButton("üè† –ú–æ–∏ –±–æ—Ç—ã", callback_data="back_to_dashboard")],
            [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")]
        ]
        
        await message_to_edit.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # Clear creation state
        context.user_data.clear()
    
    async def show_deployment_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  message_to_edit, error_details: str = None):
        """Show deployment error message"""
        message = """
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ

–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
"""
        
        if error_details:
            message += f"\n\n<i>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i>\n<code>{error_details[:200]}</code>"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="create_bot")],
            [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_dashboard")]
        ]
        
        await message_to_edit.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_examples(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show bot examples"""
        message = """
üì∫ <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Bot Factory</b>

<b>üéØ –î–ª—è –±–∏–∑–Ω–µ—Å–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫  
‚Ä¢ –°–±–æ—Ä –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã

<b>üìö –î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –≤ —É—á–µ–±–Ω—ã–µ –≥—Ä—É–ø–ø—ã
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

<b>üéÆ –î–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤:</b>
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

<b>üìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤:</b>
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚úÖ UTM-—Ç—Ä–µ–∫–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞", callback_data="create_bot")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def contact_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show support information"""  
        message = """
üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Bot Factory</b>

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!

üìß <b>Email:</b> support@botfactory.ru
üí¨ <b>Telegram:</b> @BotFactorySupport  
üì± <b>–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> @BotFactoryChat

<b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

‚ùì <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª?</b>
–ü–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Üí –ù–∞–π–¥–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

‚ùì <b>–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã</b>
–£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

‚ùì <b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏?</b>
–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏" ‚Üí "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"

‚ùì <b>–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?</b>
–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ —Ä–∞–∑–¥–µ–ª "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"

<b>üïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤
"""
        
        keyboard = [
            [InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/BotFactorySupport")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def manage_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """Show bot management options"""
        try:
            bot = self.db.get_bot_by_id(bot_id)
            if not bot:
                await update.callback_query.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            status_text = {
                'active': '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω',
                'creating': 'üîÑ –°–æ–∑–¥–∞–µ—Ç—Å—è',
                'stopped': '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                'error': '‚ùå –û—à–∏–±–∫–∞'
            }.get(bot['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            bot_username = bot.get('bot_username', 'unknown')
            created_at = bot.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]
            last_ping = bot.get('last_ping')
            last_ping_text = last_ping[:16] if last_ping else '–ù–∏–∫–æ–≥–¥–∞'
            error_message = bot.get('error_message', '')
            
            message = f"""
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º @{bot_username}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>–°–æ–∑–¥–∞–Ω:</b> {created_at}
<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_ping_text}
"""
            
            if error_message:
                message += f"\n<b>–û—à–∏–±–∫–∞:</b> <code>{error_message}</code>\n"
            
            message += "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
            
            keyboard = [
                [InlineKeyboardButton(f"ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ @{bot_username}", 
                                    url=f"https://t.me/{bot_username}")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{bot_id}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{bot_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")]
            ]
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"Error in manage_bot: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
    
    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """Restart a user bot"""
        try:
            bot = self.db.get_bot_by_id(bot_id)
            if not bot:
                await update.callback_query.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # Show processing message
            processing_msg = await update.callback_query.edit_message_text(
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ @{bot['bot_username']}...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            try:
                # Import process manager
                from bot_manager.process_manager import BotProcessManager
                manager = BotProcessManager()
                
                # Restart the bot
                success = await manager.restart_bot(bot_id)
                
                if success:
                    await processing_msg.edit_text(
                        f"‚úÖ <b>–ë–æ—Ç @{bot['bot_username']} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã.",
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton(f"ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ @{bot['bot_username']}", 
                                                url=f"https://t.me/{bot['bot_username']}")],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", 
                                                callback_data=f"manage_{bot_id}")]
                        ])
                    )
                else:
                    await processing_msg.edit_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ @{bot['bot_username']}</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='HTML',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", 
                                                callback_data=f"restart_{bot_id}")],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", 
                                                callback_data=f"manage_{bot_id}")]
                        ])
                    )
                    
            except Exception as e:
                logging.error(f"Error restarting bot {bot_id}: {e}")
                await processing_msg.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞</b>\n\n"
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <code>{str(e)[:100]}</code>\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", 
                                            callback_data=f"manage_{bot_id}")]
                    ])
                )
                
        except Exception as e:
            logging.error(f"Error in restart_bot: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    
    async def show_bot_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """Show bot statistics"""
        try:
            bot = self.db.get_bot_by_id(bot_id)
            if not bot:
                await update.callback_query.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            bot_username = bot.get('bot_username', 'unknown')
            bot_status = bot.get('status', 'unknown')
            created_at = bot.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]
            last_ping = bot.get('last_ping')
            last_ping_text = last_ping[:16] if last_ping else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            process_id = bot.get('process_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            database_status = '‚úÖ –°–æ–∑–¥–∞–Ω–∞' if bot.get('database_path') else '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞'
            
            message = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{bot_username}</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {bot_status}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {created_at}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_ping_text}

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID –±–æ—Ç–∞: {bot_id}
‚Ä¢ Process ID: {process_id}
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_status}

<i>–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
–ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏.</i>
"""
            
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_{bot_id}")],
                [InlineKeyboardButton("üîô –ú–æ–∏ –±–æ—Ç—ã", callback_data="back_to_dashboard")]
            ]
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"Error in show_bot_stats: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def run(self):
        """Run the master bot - –°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logging.info("üîÑ Creating Application...")
            self.application = Application.builder().token(self.bot_token).build()
            
            # Setup handlers (—ç—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            logging.info("üîÑ Setting up handlers...")
            self.setup_handlers_sync(self.application)
            
            logging.info("üöÄ Starting Master Bot...")
            
            # –ü–†–û–°–¢–û–ô –°–ò–ù–•–†–û–ù–ù–´–ô –ü–û–î–•–û–î
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logging.error(f"‚ùå Error running master bot: {e}")
            logging.error(f"Traceback: {traceback.format_exc()}")
            raise
    
    def setup_handlers_sync(self, application: Application):
        """Configure all handlers for master bot - –°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        
        # Main handlers
        application.add_handler(CommandHandler("start", self.handle_start))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_input))
        
        logging.info("‚úÖ Master bot handlers configured")
