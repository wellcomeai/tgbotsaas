"""
Admin Commands Handler - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

class AdminCommandsHandler:
    def __init__(self, db, config, admin_panel):
        self.db = db
        self.config = config
        self.admin_panel = admin_panel
        self.admin_chat_id = config['ADMIN_CHAT_ID']
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        user_id = user.id
        
        # Add user to database
        self.db.add_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        if self.admin_panel.is_admin(user_id):
            # Admin accessing bot
            await self.show_admin_dashboard(update, context)
        else:
            # Regular user accessing bot
            self.db.set_user_bot_started(user_id)
            await self.show_user_welcome(update, context)
    
    async def show_admin_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main admin dashboard"""
        message = self.admin_panel.get_main_menu_message()
        keyboard = self.admin_panel.get_main_menu_markup()
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
    
    async def show_user_welcome(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show welcome message to regular users"""
        welcome_message = self.db.get_setting('welcome_message', 
            f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª–æ–º @{self.config.get('BOT_USERNAME', 'channel')}.\n\n"
            "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @BotFactoryMasterBot"
        )
        
        await update.message.reply_text(welcome_message)
    
    async def handle_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /admin command"""
        if not self.admin_panel.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        await self.show_admin_dashboard(update, context)
    
    async def handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command"""
        if not self.admin_panel.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        message = self.admin_panel.get_stats_message()
        keyboard = self.admin_panel.get_stats_keyboard()
        
        await update.message.reply_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def handle_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /broadcast command"""
        if not self.admin_panel.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        # Extract broadcast message from command
        args = context.args
        if not args:
            await update.message.reply_text(
                "üì¢ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /broadcast**\n\n"
                "–§–æ—Ä–º–∞—Ç: `/broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: /admin",
                parse_mode='Markdown'
            )
            return
        
        broadcast_text = ' '.join(args)
        await self.send_broadcast(update, context, broadcast_text)
    
    async def send_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Send broadcast message to all users"""
        try:
            # Get all active users
            users = self.db.get_active_users()
            
            if not users:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # Create broadcast record
            broadcast_id = self.db.create_broadcast(
                title="–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
                content=text,
                utm_source="admin_broadcast"
            )
            
            # Send status message
            status_msg = await update.message.reply_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
            )
            
            successful_sends = 0
            failed_sends = 0
            
            # Send to each user
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=text,
                        parse_mode='Markdown'
                    )
                    
                    # Log message
                    self.db.log_message(
                        user_id=user['user_id'],
                        message_type='broadcast',
                        content=text,
                        utm_source='admin_broadcast'
                    )
                    
                    successful_sends += 1
                    
                except Exception as e:
                    logging.warning(f"Failed to send to user {user['user_id']}: {e}")
                    failed_sends += 1
            
            # Update broadcast stats
            self.db.update_broadcast_stats(
                broadcast_id=broadcast_id,
                total_recipients=len(users),
                successful_sends=successful_sends,
                failed_sends=failed_sends
            )
            
            # Update status message
            await status_msg.edit_text(
                f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful_sends}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_sends}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_sends/len(users)*100):.1f}%",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Broadcast error: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}"
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from admin panel"""
        query = update.callback_query
        data = query.data
        
        await query.answer()
        
        try:
            if data == "admin_main":
                await self.show_admin_dashboard(update, context)
            
            elif data == "admin_stats":
                await self.show_admin_stats(update, context)
            
            elif data == "admin_broadcast":
                await self.show_broadcast_menu(update, context)
            
            elif data == "admin_users":
                await self.show_users_menu(update, context)
            
            elif data == "admin_settings":
                await self.show_settings_menu(update, context)
            
            elif data == "admin_mass_send":
                await self.show_mass_send_menu(update, context)
            
            elif data == "admin_help":
                await self.show_help_menu(update, context)
            
            elif data.startswith("broadcast_"):
                await self.handle_broadcast_callback(update, context, data)
            
            elif data.startswith("users_"):
                await self.handle_users_callback(update, context, data)
            
            elif data.startswith("settings_"):
                await self.handle_settings_callback(update, context, data)
            
            else:
                await query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logging.error(f"Callback query error: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def show_admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed statistics"""
        message = self.admin_panel.get_stats_message()
        keyboard = self.admin_panel.get_stats_keyboard()
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_broadcast_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show broadcast management menu"""
        message = self.admin_panel.get_broadcast_menu_message()
        keyboard = self.admin_panel.get_broadcast_keyboard()
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_users_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user management menu"""
        message = self.admin_panel.get_users_menu_message()
        keyboard = self.admin_panel.get_users_keyboard()
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show settings menu"""
        message = self.admin_panel.get_settings_menu_message()
        keyboard = self.admin_panel.get_settings_keyboard()
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_mass_send_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show mass send interface"""
        message = """
üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π UTM —Ç—Ä–µ–∫–∏–Ω–≥ —Å—Å—ã–ª–æ–∫  
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

**–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:**
üéâ –ù–æ–≤–∞—è –∞–∫—Ü–∏—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!
–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏.
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com
#–∞–∫—Ü–∏—è #—Å–∫–∏–¥–∫–∞
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:
"""
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # Set user state for next message
        context.user_data['waiting_for_broadcast'] = True
    
    async def show_help_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help menu"""
        message = self.admin_panel.get_help_message()
        keyboard = self.admin_panel.get_help_keyboard()
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def handle_broadcast_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """Handle broadcast-related callbacks"""
        if data == "broadcast_create":
            await update.callback_query.answer("üöß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "broadcast_history":
            await update.callback_query.answer("üöß –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "broadcast_welcome":
            await update.callback_query.answer("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def handle_users_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """Handle user management callbacks"""
        if data == "users_list":
            await self.show_users_list(update, context)
        elif data == "users_activity":
            await update.callback_query.answer("üöß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "users_export":
            await update.callback_query.answer("üöß –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
        """Show paginated users list"""
        users = self.db.get_active_users()
        
        if not users:
            await update.callback_query.edit_message_text(
                "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–∞–Ω–∞–ª–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
            )
            return
        
        per_page = 5
        total_pages = (len(users) + per_page - 1) // per_page
        
        message = self.admin_panel.format_user_list(users, page, per_page)
        keyboard = self.admin_panel.get_pagination_keyboard(page, total_pages, "users_page")
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def handle_settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """Handle settings callbacks"""
        if data == "settings_auto_approve":
            await self.toggle_auto_approve(update, context)
        elif data == "settings_welcome":
            await update.callback_query.answer("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "settings_channel":
            await update.callback_query.answer("üöß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif data == "settings_utm":
            await update.callback_query.answer("üöß UTM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def toggle_auto_approve(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Toggle auto-approve setting"""
        current = self.db.get_setting('auto_approve', 'true')
        new_value = 'false' if current == 'true' else 'true'
        
        self.db.set_setting('auto_approve', new_value)
        
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value == 'true' else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await update.callback_query.answer(f"‚úÖ –ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ {status}")
        
        # Refresh settings menu
        await self.show_settings_menu(update, context)
    
    async def handle_private_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle private messages from admin"""
        # Check if waiting for broadcast message
        if context.user_data.get('waiting_for_broadcast'):
            broadcast_text = update.message.text
            context.user_data['waiting_for_broadcast'] = False
            
            await self.send_broadcast(update, context, broadcast_text)
        else:
            # Default response
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
